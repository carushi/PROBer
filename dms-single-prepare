#!/usr/bin/env python

import os
import sys
import argparse
import glob

import utils
from utils import MyFormatter, MyParser, runProg

#Parse options and arguments
              
parser = MyParser(formatter_class=MyFormatter)

parser.add_argument("input", help = "A multi-FASTA file contains all transcript sequences in the transcriptome, e.g. arabidopsis_new/arabidopsis.transcripts.fa", metavar = "input_full.fa")
parser.add_argument("tid", help = "The name of the transcript of interest. This program will extract its sequence and build Bowtie and Bowtie2 indices.", metavar = "transcript_name")
parser.add_argument("ref_name", help = "The name of the reference used. This program will generate Bowtie and Bowtie2 indices that are prefixed by this name. This name can contain path information (e.g. /ref/mm9).", type = utils.expand, metavar = "reference_name")

parser.add_argument("--bowtie-path", help = "The path to the Bowtie executables.", type = utils.expand, metavar = "<path>")
parser.add_argument("--bowtie2-path", help = "The path to the Bowtie2 executables.", type = utils.expand, metavar = "<path>")

args = parser.parse_args()

#Set executable directory

mydir = os.path.dirname(utils.expand(sys.argv[0]))
os.environ["PATH"] = mydir + os.pathsep + os.getenv("PATH", ".")
os.environ["PYTHONPATH"] = mydir + os.pathsep + os.getenv("PYTHONPATH", ".")

#Run programs

#utils.demo = True

dir_ = os.path.dirname(args.ref_name)
if not os.path.exists(dir_):
    os.makedirs(dir_)

# Extract reference
fin = open(args.input)
line = myseq = tmpseq = ""
while True:
    line = fin.readline()
    if line == "":
        break
    tmpseq = fin.readline()
    if line[1:-1] == args.tid:
       myseq = tmpseq
       break
fin.close()

if myseq == "":
    print("Cannot find transcript {}!".format(args.tid))
    exit(-1)

fout = open("{}.fa".format(args.ref_name), "w")
fout.write(">{}\n".format(args.tid))
fout.write(myseq)
fout.close()

# Build aligner indices
command = []
command.extend(["{}bowtie-build".format(args.bowtie_path + os.sep if args.bowtie_path != None else ""), "-f"])
command.extend(["{}.fa".format(args.ref_name), args.ref_name])
runProg(command)

command = []
command.extend(["{}bowtie2-build".format(args.bowtie2_path + os.sep if args.bowtie2_path != None else ""), "-f"])
command.extend(["{}.fa".format(args.ref_name), args.ref_name])
runProg(command)

