#!/usr/bin/env python

import os
import sys
import argparse

import utils
from utils import MyFormatter, MyParser, runProg

#Parse options and arguments

program_name = os.path.basename(utils.expand(sys.argv[0]))

parser = MyParser(formatter_class = MyFormatter, usage = "{} [options] reference_name sample_name {{--reads minus_channel_mate1_read_file(s) [minus_channel_mate2_read_file(s)] plus_channel_mate1_read_file(s) [plus_channel_mate2_read_file(s)]}}".format(program_name), 
                  description = "DESCRIPTION: This program first uses RSEM to estimate abundances and then learn structure parameters individually.", 
                  epilog = "L:OUTPUTS:\n"
                  "  sample_name.gamma\n"
                  "    Estimated gamma parameters for all transcript. The first line provides the number of transcripts. In each of the following line, if the transcript is of interest, "
                       "the first field gives the transcript name, the second field provides the number of estimated gamma parameters, "
                       "which is equal to transcript length - primer length. In the end, estimated gamma values at each position were given (from 5' end to 3' end). "
                       "Otherwise, it is a blank line.\n\n"                  
                  "  sample_name.beta\n"
                  "    Estimated beta parameters for the transcript. The format is similar to 'sample_name.gamma'. If a transcript is of interest, the first field gives the transcript name, "
                       "the second field provides the number of estimated beta parameters, "
                       "which is equal to transcript length - primer length. In the end, estimated beta values at each position were given (from 5' end to 3' end).\n\n")
                  
parser.add_argument("ref_name", help = "The name of the reference used.", type = utils.expand, metavar = "reference_name")
parser.add_argument("sample_name", help = "The output name of this run. All outputs use this name as their prefixes.", type = utils.expand, metavar = "sample_name")

group = parser.add_argument_group(title = "Input", description = "Input reads.")

group.add_argument("--reads", help = "L:Input are read files.\nminus_channel_mate1_read_file(s) and plus_channel_mate1_read_file(s) are comma-separated lists of FASTQ files containing single-end reads or first mates of paired-end reads\nminus_mate2_read_file(s) and plus_mate2_read_file(s), presented only if '--paired-end' is enabled, are comma-separated lists of FASTQ files containing second mates of\npaired-end reads\n", nargs = '+', action = utils.nargs_range([2, 4]), type = utils.expandAll, metavar = "mate_read_file(s)", required = True)

group = parser.add_argument_group(title = "Basic options")
group.add_argument("--paired-end", help = "Input reads are paired-end reads.", action = "store_true", dest = "paired_end")
group.add_argument("-p", "--number-of-threads", help = "Number of threads we can use.", type = int, default = 1, dest = "num_threads", metavar = "<int>")
group.add_argument("--input-list", help = "It is a list of transcript names that we are interested, one line per name.", dest = "input_list", metavar = "<file>")

group = parser.add_argument_group(title = "Structure-seq related", description = "Set necessary parameters for generating a config file.")
group.add_argument("--primer-length", help = "Random primer length.", type = int, default = 6, metavar = "<int>")
group.add_argument("--size-selection-min", help = "The minimum fragment length that can pass the size selection step.", type = int, default = 21, metavar = "<int>")
group.add_argument("--size-selection-max", help = "The maximum fragment length that can pass the size selection step.", type = int, default = 526, metavar = "<int>")
group.add_argument("--gamma-init", help = "Intial value for all gammas.", type = float, default = 0.001, metavar = "<float>")
group.add_argument("--beta-init", help = "Initial value for all betas.", type = float, default = 0.001, metavar = "<float>")

group = parser.add_argument_group(title = "Estimation related", description = "Parameters needed for estimating structure parameters.")
group.add_argument("--read-length", help = "Read length before trimming adaptors, only required for single-end reads.", type = int, default = 37, metavar = "<int>")
group.add_argument("--maximum-likelihood", help = "Use maximum likelihood estimates.", action = "store_true", dest = "ml_est")
group.add_argument("--sep", help = "Estimate (-) and (+) channels separately.", action = "store_true")
group.add_argument("--rounds", help = "Rounds of EM iterations to run.", type = int, default = 400, metavar = "<int>")

group = parser.add_argument_group(title = "Alignment options", description = "If --paired-end is specified, Bowtie2 will be used. Otherwise, Bowtie will be used and reads with more than 200 alignments will be filtered out.")
group.add_argument("--bowtie-path", help = "The path to Bowtie executables.", type = utils.expand, metavar = "<path>")
group.add_argument("--bowtie2-path", help = "The path to Bowtie2 executables.", type = utils.expand, metavar = "<path>")

parser.add_argument("-q", "--quiet", help = "Suppress the output of logging information.", action = "store_true")

args = parser.parse_args()

if (args.paired_end and len(args.reads) != 4) or (not args.paired_end and len(args.reads) != 2):
    parser.error("Number of Read/Mate files does not match!")

#Set executable directory

mydir = os.path.dirname(utils.expand(sys.argv[0]))
os.environ["PATH"] = mydir + os.pathsep + "{}/sam".format(mydir) + os.pathsep + os.getenv("PATH", ".")
os.environ["PYTHONPATH"] = mydir + os.pathsep + os.getenv("PYTHONPATH", ".")

#Run programs

#utils.demo = True
       
dir_ = os.path.dirname(args.sample_name)
if not os.path.exists(dir_):
    os.makedirs(dir_)


command = []
pos = 0

command.extend(["rsem-calculate-expression", "--strand-specific", "-p", str(args.num_threads)])

if not args.paired_end:
    # Use Bowtie for RSEM
    if args.bowtie_path != None:
        command.extend(["--bowtie-path", args.bowtie_path])
    pos = len(command)
    command.extend([args.reads[0]])
else:
    # Use Bowtie2
    command.extend(["--paired-end", "--bowtie2"])
    if args.bowtie2_path != None:
        command.extend(["--bowtie2-path", args.bowtie2_path])
    pos = len(command)
    command.extend([args.reads[0], args.reads[1]])

command.extend([args.ref_name, "{}_minus".format(args.sample_name)])

runProg(command)

if not args.paired_end:
    command[pos] = args.reads[1]
else:
    command[pos] = args.reads[2]
    command[pos + 1] = args.reads[3]

command[-1] = "{}_plus".format(args.sample_name);

runProg(command)

# Generate config file
fh = open("{}.config".format(args.sample_name), 'w')
fh.write("{0}\n{1}\n{2}\n{3}\n{4}\n".format(args.primer_length, args.size_selection_min, args.size_selection_max, args.gamma_init, args.beta_init))
fh.close()

# Run EM    
command = ["PROBer_single_transcript_batch", "{}.config".format(args.sample_name), "{}_minus.transcript.bam".format(args.sample_name), "{}_plus.transcript.bam".format(args.sample_name), args.sample_name]

command.extend(["--rounds", str(args.rounds), "-p", str(args.num_threads)])
if not args.paired_end:
    command.extend(["--read-length", str(args.read_length)])
else:
    command.append("--paired-end")
if args.input_list != None:
    command.extend(["--input", args.input_list])

if args.ml_est:
    command.append("--maximum-likelihood")

runProg(command)
